#page-landing {
  background: var(--color-primary);
}
#page-landing #container {
  color: var(--color-text-in-primary);
}

.logo-container img {
  height: 10rem;
}

.logo-container {
  text-align: center;
  margin-bottom: 3.2rem;
}

.logo-container h2 {
  font-weight: 500;
  font-size: 3.2rem;
  line-height: 4.6rem;
  margin-top: 0.8rem;
}

.hero-image {
  width: 100%; /* 100% do tamanho do container */
}

.buttons-container {
  display: flex;
  justify-content: center;
  margin: 3.2rem 0;
}

.buttons-container a {
  width: 30rem;
  height: 10.4rem;
  border-radius: 0.8rem;
  margin-right: 1.6rem;
  font: 700 2.4rem Archivo; /* Weight Height Family */
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  color: var(--color-button-text);
  transition: background 0.2s; /* transição no background em 0.2s */
}

.buttons-container a img {
  width: 4rem;
  margin-right: 2.4rem;
}

.buttons-container a.study {
  background: var(--color-primary-lighter);
}

.buttons-container a.give-classes {
  background: var(--color-secondary);
  margin-right: 0;
  /* Quando a margem foi colocada no container
  dos botões, não havia necessidade de colocar 
  nesse, então aqui retiramos a mesma. Já que 
  ele tem identificação própria */
}

.buttons-container a.study:hover {
  background: var(--color-primary-light);
}

.buttons-container a.give-classes:hover {
  background: var(--color-secondary-dark);
}

.total-conections {
  font-size: 1.8rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.total-conections img {
  margin-left: 0.8rem;
}

/* Enquanto a tela for menor que 700, essa regra é aplicada */
@media (max-width: 699px) {
  :root {
    font-size: 40%; /* 40 dos 60 do main */
  }
}

/* Uma regra MEDIA, é aplicada quando se cumprir
a regra colocada dentro das chaves */
@media (min-width: 1100px) {
  /* a partir dessa largura as propriedades
  abaixo serão aplicadas */
  #page-landing #container {
    max-width: 1100px;
    display: grid;
    grid-template-columns: 2fr 1fr 2fr;
    grid-template-rows: 350px 1fr;
    /* Trabalhar as áreas do grid, nomeando-as
    com o que quero em cada pedaço, seguindo a 
    disposição delas linha/coluna */
    grid-template-areas:
      'proffy image image'
      'button button texting';
    column-gap: 87px; /*Espaçamento (salto)
    entre os grids */
    row-gap: 86px;
  }

  /* Depois de nomeá-las, chamá-las para ocupar
  os espaços determinados */
  .logo-container {
    grid-area: proffy;
    height: 350px;
    text-align: initial;
    /* Quando coloquei 100% de altura, ele saiu do 
    grid, então o centralizei com o align-self e 
    ele passou a respeitar o grid. Ele alinhou todo
    o conteúdo dele mesmo (grid) ao centro */
    align-self: center;
    margin-bottom: 0;
  }

  .logo-container img {
    height: 127px;
  }

  .hero-image {
    grid-area: image;
    height: 350px;
  }

  .buttons-container {
    grid-area: button;
    justify-content: flex-start;
    margin: 0;
  }

  .total-conections {
    grid-area: texting;
    justify-self: end;
    font-size: 1.2rem;
  }
}
